set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'nvie/vim-flake8'
Plugin 'davidhalter/jedi-vim'
Plugin 'python-mode/python-mode'
Plugin 'scrooloose/syntastic'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
execute pathogen#infect()
syntax on
filetype plugin indent on
"
"Contains some boilerplate settings for vim's cscope interface,
" plus some keyboard mappings that I've found useful.
"
" USAGE:
" -- vim 6:     Stick this file in your ~/.vim/plugin directory (or in a
"               'plugin' directory in some other directory that is in your
"               'runtimepath'.
"
" -- vim 5:     Stick this file somewhere and 'source cscope.vim' it from
"               your ~/.vimrc file (or cut and paste it into your .vimrc).
"
" NOTE:
" These key maps use multiple keystrokes (2 or 3 keys).  If you find that vim
" keeps timing you out before you can complete them, try changing your timeout
" settings, as explained below.
"
" Happy cscoping,
"
" Jason Duell       jduell@alumni.princeton.edu     2002/3/7
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


colo default
syntax on
set history=500
set nu

" have command-line completion <Tab> (for filenames, help topics, option names)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmode=list:longest,full
" display the current mode and partially-typed commands in the status line:
set showmode
set showcmd
" have the mouse enabled all the time:
set mouse=r
"set mouse=a

" show matching braces
set showmatch
" Extends Matching pairs
set matchpairs+=<:>
set matchpairs+==:;
" save file to swap file after each 10 char insertion
" default value is 200 chars
set updatecount=50

" highlight the current column
"set cursorcolumn
" highlight the current line
"set cursorline
"set ruler

" highlight search text
set hls

set wildmenu
set cindent
set hlsearch
"set expandtab
set autoindent
set shiftround
set smartindent

set softtabstop=4
set shiftwidth=4
"set columns=80
set tabstop=4

" enable filetype detection:
filetype on
" for C-like programming, have automatic indentation:
autocmd FileType c,cpp,slang set cindent
" for actual C (not C++) programming where comments have explicit end
" characters, if starting a new line in the middle of a comment automatically
" insert the comment leader characters:
autocmd FileType c set formatoptions+=ro
" for Perl programming, have things in braces indenting themselves:
autocmd FileType perl set smartindent
" in makefiles, don't expand tabs to spaces, since actual tab characters are
" needed, and have indentation at 8 chars to be sure that all indents are tabs
" (despite the mappings later):
"autocmd FileType make set noexpandtab shiftwidth=8
" make searches case-insensitive, unless they contain upper-case letters:
set ignorecase
set smartcase
" show the `best match so far' as search strings are typed:
set incsearch

"map ,e :e <C-R>=expand("%:p:h") . "/"<CR>    

"map <space>b :Search <C-R>=expand("<cword>")<CR><CR>
"map <space>B :SearchReset <CR><CR>
 


" goto next, previous file if multiple file opened
" next file
":nm <f2> :bp!<CR>
"" previous file
":nm <f3> :bn!<CR>
" close current file
" :nm <f12> :bn!<CR>

" Switch to shell prompt
":nm <f10> :ConqueTermSplit bash<CR>
"nmap <C-_><f10> :shell<CR>
     
" open alternate file
"map <c-p> :e#<cr>

"map zz ZZ

" interpret command WQ, Wq as wq ( to avoid type mismatch
"command! WQ wq
"command! Wq wq


"in insert mode <c-i> implies write to file
"imap <C-i> <esc>:w<cr>i

"in insert mode <c-u> implies quit file forcefully
"imap <C-u> <esc>:q!<cr>
"imap <C-u> <space><space><space><space>
"imap <C-t> <tab>
"" reduced window move operation
"map <C-h> <C-w>h
"map <C-j> <C-w>j
"map <C-k> <C-w>k
"map <C-l> <C-w>l
"map <C-i> <C-w>=

" open the directory explorer vertically
"map <space>o :NERDTree <cr>
"map <space>O :Vexplore<cr>

"map <space>e :VE<cr><cr>
"map <space>E :VE<cr><cr>

"map <space>t :tabnew<cr><cr>
"map <space>T :tabclose<cr><cr>

"inoremap <Leader>tn <C-o>:tabnext<CR>
"nnoremap <Leader>tn :tabnext<CR>
"inoremap <Leader>tp <C-o>:tabprev<CR>
"nnoremap <Leader>tp :tabprev<CR>
 


" close the current window
"map <space>c :q!<cr>
"map <space>C :q!<cr>

" duplicate current window
"map <space>v :vsplit<cr>
"map <space>V :vsplit<cr>

" duplicate current window
"map <space>h :split<cr>
""map <space>H :Hexplore<cr>


" duplicate current window
"map <space>w :w<cr>
"map <space>W :w<cr>

" open new window with no filename
"map <space>n :vnew<cr>
"map <space>N :new<cr>

 " duplicate current window
"map <space>; :set cursorcolumn<cr>
"map <space>' :set nocursorcolumn<cr>
 
" encrypt/decrypt the text in current window
"map <f12> ggVGg?

" function that create folds according to syntax
"func! HideAll()
"    syn region myFolj start="{" end="}" transparent fold
"    syn sync fromstart
"    set foldnestmax=5000
"    set foldmethod=syntax
"endfunc
 
"call  HideAll()

"hi Search ctermbg=DarkGray ctermfg=Blue

"function! Komment()
"    if getline(".") =~ '\/\*'
"        let hls=@/
"        s/^\/\*//
"        s/*\/$//
"        let @/=hls
"    else
"        let hls=@/
"        s/^/\/*/
"        s/$/*\//
"        let @/=hls
"        endif
"endfunction
"

"map <space>q :call Komment()<CR>

set virtualedit=all

" highlighted cursor line background and font color
"highlight CursorLine guibg=lightblue ctermbg=lightgray

"set cursorcolumn
"set cursorcolumn
 
 
"Set the maximum number width. Useful when "set number" is used
"set numberwidth=5
"
"set spellchecket on
"set spell

"set the language for spell check. To check for correct work that is marked red by spellchecker , just press zo in normal mode to get more option for misspelled word
"set spelllang=en,da,de,it

"set number of alternative to show on spell check
"set spellsuggetst=10

" function to get the text values to show as tool tip text
"function! SimpleBalloon()
"    return 'Cursor is at line/column: ' . v:beval_lnum .
" \'/' . v:beval_col .
" \ ' in file ' . bufname(v:beval_bufnr) .
" \ '. Word under cursor is: "' . v:beval_text . '"'
" endfunction
 " enable balloonexpr
"set balloonexpr=SimpleBalloon()
"set ballooneval

" Cursor column settings
"highlight CursorColumn term=bold,underline cterm=bold,underline ctermfg=2 ctermbg=black guibg=Grey90

" left margin number setting when "set nu"
"highlight LineNr ctermfg=DarkGray

"apearence schema for Comment in souce code
"highlight Comment cterm=bold ctermfg=0 guifg=Brown

"apearence schema for directory vim directory browser
"highlight Directory term=bold ctermfg=6  guifg=Brown

"plugin info
" taglist plugin
" :tlistToggle :tlistAddfileRecursively
"shell
" :shell
"Draw it plugin
" :DIstart :DIstop

"For automatic detection of .notes extension, add the following lines to your filetype.vim :
"augroup filetypedetect
"au BufNewFile,BufRead *.notes setf notes
"augroup END
""Add the following to the .vim/ftplugin/notes.vim file:
"if exists("b:did_ftplugin")
"finish
"endif
"let b:did_ftplugin = 1
"setlocal textwidth=80
"let b:undo_ftplugin = "setlocal  tw< commentstring<"
"If this syntax is to be used on any other file, in vim,
":set syntax=notes

" Invoke man command for the keywork under cursor while pressing K eg. if "ls"
" is under cursor then it will invoke man page of ls command. If you press 7K
" then it will invoke "man 7 ls"
"set keywordprg=man

" coding standard of 80 characters per line
" Mark text above 80 column by red mark
"match ErrorMsg /\%>80v.\+/

"highlight Normal guibg=black  guifg=gray font='Courier 10 Pitch Italic 10'


"let g:winManagerWindowLayout = "FileExplorer"
"let g:MultipleSearchMaxColors=8

" To turn on omnicompletion
"filetype plugin indent on
"set ofu=syntaxcomplete#Complete

"autocmd FileType python set omnifunc=pythoncomplete#Complete
"let g:acp_behaviorSnipmateLength=1
"let g:acp_behaviorPerlOmniLength=1



" source explorer settings
"The switch of the Source Explorer
"nmap <F8> :SrcExplToggle<CR>
"
"Set the height of Source Explorer window
"let g:SrcExpl_winHeight = 8
""Set 100 ms for refreshing the Source Explorer
"let g:SrcExpl_refreshTime = 100
"Set "Enter" key to jump into the exact definition context
"let g:SrcExpl_jumpKey = "<ENTER>"
"Set "Space" key for back from the definition context
"let g:SrcExpl_gobackKey = "<SPACE>"
"In order to Avoid conflicts, the Source Explorer should know what
" plugins are using buffers. And you need add their bufname into
" the list below according to the command ":buffers!"
"let g:SrcExpl_pluginList = [
"         \ "__Tag_List__",
"         \ "_NERD_tree_",
"         \ "Source_Explorer"
"         \ ]
"Enable/Disable the local definition searching, and note that this is not
"guaranteed to work, the Source Explorer doesn't check the syntax for now.
"It only searches for a match with the keyword according to command 'gd'
"let g:SrcExpl_searchLocalDef = 1
"Do not let the Source Explorer update the tags file when opening
"let g:SrcExpl_isUpdateTags = 0
"Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to
"create/update a tags file
"let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
"Set "<F12>" key for updating the tags file artificially
"let g:SrcExpl_updateTagsKey = "<F12>"


" Open and close all the three plugins on the same time
"nmap <F8>   :TrinityToggleAll<CR>
" Open and close the srcexpl.vim separately
"map <space>g :TrinityToggleSourceExplorer<CR>

" Open and close the taglist.vim separately
"map <space>a  :TrinityToggleTagList<CR>

" Open and close the NERD_tree.vim separately
"map <space>l :TrinityToggleNERDTree<CR>

" gnome shell related key bindings
"inoremap <Leader>fs <C-o>:Fullscreen<CR>
"nnoremap <Leader>fs :Fullscreen<CR>
"inoremap <Leader>op <C-o>:Open<CR>
"nnoremap <Leader>op :Open<CR>

" temp section
"autocmd FileType c source ~/.vim/ftplugin/cscope_plus.vim
"autocmd FileType h source ~/.vim/ftplugin/cscope_plus.vim
"autocmd FileType c set tags+=/var/tmp/2.6.35-22-generic/tags
 



" This tests to see if vim was configured with the '--enable-cscope' option
" when it was compiled.  If it wasn't, time to recompile vim...
"if has("cscope")

    """"""""""""" Standard cscope/vim boilerplate

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    " add any cscope database in current directory
"    if filereadable("cscope.out")
"        cs add cscope.out  
    " else add the database pointed to by environment variable
"    elseif $CSCOPE_DB != ""
"        cs add $CSCOPE_DB
"    endif

    " show msg when any other cscope db added
    set cscopeverbose  


    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.  
    "

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>    
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>    


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>    

    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>    
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>    
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>    
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>    


    " Hitting CTRL-space *twice* before the search type does a vertical
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>    
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>    
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>


    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    set notimeout
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    set ttimeout
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100

"endif

set foldlevelstart=5
hi Search cterm=NONE ctermfg=black ctermbg=yellow


function StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction
